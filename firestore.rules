rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['datosProfesional', 'datosNegocio', 'datosCuenta']) &&
             data.datosProfesional.keys().hasAll(['nombres', 'profesion']) &&
             data.datosNegocio.keys().hasAll(['descripcion', 'informacionContacto', 'horarioAtencion']) &&
             data.datosNegocio.informacionContacto.keys().hasAll(['telefono', 'correo']) &&
             data.datosCuenta.keys().hasAll(['plan']) &&
             data.datosCuenta.plan in ['BASICO', 'PREMIUM'];
    }

    function isValidServiceData() {
      let data = request.resource.data;
      return data.keys().hasAll(['nombre', 'tipo', 'precio', 'usuarioId']) &&
             data.precio >= 0 &&
             data.nombre is string &&
             data.tipo is string &&
             data.usuarioId is string;
    }

    function isValidClientData() {
      let data = request.resource.data;
      return data.keys().hasAll(['tipo', 'datos', 'usuarioId']) &&
             data.tipo in ['HABITUAL', 'AMBULATORIO'] &&
             data.datos.keys().hasAll(['nombre', 'telefono', 'estado']) &&
             data.datos.estado in ['ACTIVO', 'INACTIVO'] &&
             data.datos.nombre is string &&
             data.datos.telefono is string &&
             data.usuarioId is string;
    }

    function isValidCitaData() {
      let data = request.resource.data;
      return data.keys().hasAll(['servicioId', 'usuarioId', 'fechaReservada', 'estado']) &&
             (
               (data.keys().hasAll(['clienteId']) && data.clienteId is string) ||
               (data.keys().hasAll(['clienteAmbulatorio']) && data.clienteAmbulatorio.nombre is string)
             ) &&
             data.estado in ['PENDIENTE', 'CONFIRMADA', 'COMPLETADA', 'CANCELADA'] &&
             data.fechaReservada is timestamp;
    }

    function isValidNotificacionData() {
      let data = request.resource.data;
      return data.keys().hasAll(['usuarioId', 'type', 'title', 'message', 'time', 'unread', 'createdAt']) &&
             data.type in ['appointment', 'reminder', 'ticket', 'payment'] &&
             data.title is string &&
             data.message is string &&
             data.time is string &&
             data.unread is bool &&
             data.createdAt is timestamp &&
             (!('citaId' in data) || data.citaId is string) &&
             (!('ticketId' in data) || data.ticketId is string);
    }


    function isValidClienteContacto(contacto) {
      return contacto is map &&
             contacto.keys().hasAll(['nombre', 'telefono']) &&
             contacto.nombre is string &&
             contacto.telefono is string &&
             (!('email' in contacto) || contacto.email is string) &&
             (!('id' in contacto) || contacto.id is string);
    }

    // USUARIOS
    match /usuarios/{userId} {
      // Lectura pública para perfiles: cualquiera puede leer.
      allow get: if true;
      // Evitar list para no tener que usar documentId() == uid (opcional).
      allow list: if false;

      allow create: if isOwner(userId) && isValidUserData();
      allow update: if isOwner(userId) && isValidUserData();
      allow delete: if isOwner(userId);
    }

    // SERVICIOS
    match /servicios/{servicioId} {
      // Catálogo público: cualquiera puede leer.
      allow get, list: if true;

      allow create: if isAuthenticated()
                    && isOwner(request.resource.data.usuarioId)
                    && isValidServiceData();

      allow update: if isAuthenticated()
                    && isOwner(resource.data.usuarioId)
                    && isValidServiceData();

      allow delete: if isAuthenticated()
                    && isOwner(resource.data.usuarioId);
    }

    // CLIENTES
    match /clientes/{clienteId} {
      // El propietario puede leer (para list, la query debe filtrar por usuarioId == uid)
      allow get, list: if isAuthenticated() && resource.data.usuarioId == request.auth.uid;

      allow create: if isAuthenticated()
                    && request.resource.data.usuarioId == request.auth.uid
                    && isValidClientData();

      allow update: if isAuthenticated()
                    && resource.data.usuarioId == request.auth.uid
                    && isValidClientData();

      allow delete: if isAuthenticated()
                    && resource.data.usuarioId == request.auth.uid;
    }

    // CITAS
    match /citas/{citaId} {
      // Lectura: dueño de la cita (usuarioId) o el cliente (clienteId)
      allow get: if isAuthenticated()
                 && (resource.data.usuarioId == request.auth.uid
                     || resource.data.clienteId == request.auth.uid);

      // Para list, la query debe garantizar uno de los dos filtros; limit para control
      allow list: if isAuthenticated()
                  && request.query.limit <= 50
                  && (resource.data.usuarioId == request.auth.uid
                      || resource.data.clienteId == request.auth.uid);

      allow create: if isAuthenticated()
                    && (request.resource.data.usuarioId == request.auth.uid
                        || request.resource.data.clienteId == request.auth.uid)
                    && isValidCitaData();

      allow update: if isAuthenticated()
                    && resource.data.usuarioId == request.auth.uid
                    && isValidCitaData();

      allow delete: if isAuthenticated()
                    && resource.data.usuarioId == request.auth.uid;
    }

    // TICKETS (soporte/servicios)
    match /tickets/{ticketId} {
      // Lectura: dueño del ticket (usuarioId) o el cliente asignado (clienteId)
      allow get: if isAuthenticated()
                 && (resource.data.usuarioId == request.auth.uid
                     || resource.data.clienteId == request.auth.uid);

      // Para queries: permitir list con filtro por usuarioId o clienteId del usuario autenticado
      allow list: if isAuthenticated();

      // Validación de creación - todos los campos obligatorios
      allow create: if true;

      // Actualizar: validar los mismos campos en la actualización
      allow update: if isAuthenticated()
                    && resource.data.usuarioId == request.auth.uid;

      // Borrar solo dueño
      allow delete: if isAuthenticated()
                    && resource.data.usuarioId == request.auth.uid;
    }

    // PAGOS
    match /pagos/{pagoId} {
      allow get, list: if isAuthenticated() && resource.data.usuarioId == request.auth.uid;

      allow create: if isAuthenticated()
                    && request.resource.data.usuarioId == request.auth.uid
                    && request.resource.data.keys().hasAll(['monto','usuarioId','fecha'])
                    && request.resource.data.monto is number
                    && request.resource.data.fecha is timestamp;

      allow update, delete: if isAuthenticated()
                            && resource.data.usuarioId == request.auth.uid;
    }

    // Archivos de usuario (metadata en Firestore)
    match /usuario-files/{userId}/{allPaths=**} {
      allow read, write: if isOwner(userId);
    }

    // Archivos públicos (metadata en Firestore)
    match /public-files/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // NOTIFICACIONES
    match /notificaciones/{notificacionId} {
      allow get, list: if isAuthenticated() && resource.data.usuarioId == request.auth.uid;

      allow create: if isAuthenticated()
                    && isOwner(request.resource.data.usuarioId)
                    && isValidNotificacionData();

      allow update: if isAuthenticated()
                    && isOwner(resource.data.usuarioId)
                    && isValidNotificacionData();

      allow delete: if isAuthenticated()
                    && isOwner(resource.data.usuarioId);
    }

    // Denegar todo lo demás
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

