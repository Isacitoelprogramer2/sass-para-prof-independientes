rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Función helper para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función helper para verificar si el usuario es el propietario del documento
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Función helper para verificar datos requeridos del usuario
    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['datosProfesional', 'datosNegocio', 'datosCuenta']) &&
             data.datosProfesional.keys().hasAll(['nombres', 'profesion']) &&
             data.datosNegocio.keys().hasAll(['descripcion', 'informacionContacto', 'horarioAtencion']) &&
             data.datosNegocio.informacionContacto.keys().hasAll(['telefono', 'correo']) &&
             data.datosCuenta.keys().hasAll(['plan']) &&
             data.datosCuenta.plan in ['BASICO', 'PREMIUM'];
    }
    
    // Función helper para verificar datos válidos de servicio
    function isValidServiceData() {
      let data = request.resource.data;
      return data.keys().hasAll(['nombre', 'tipo', 'precio', 'usuarioId']) &&
             data.precio >= 0 &&
             data.nombre is string &&
             data.tipo is string &&
             data.usuarioId is string;
    }
    
    // Función helper para verificar datos válidos de cliente
    function isValidClientData() {
      let data = request.resource.data;
      return data.keys().hasAll(['tipo', 'datos', 'usuarioId']) &&
             data.tipo in ['HABITUAL', 'AMBULATORIO'] &&
             data.datos.keys().hasAll(['nombre', 'telefono', 'estado']) &&
             data.datos.estado in ['ACTIVO', 'INACTIVO'] &&
             data.datos.nombre is string &&
             data.datos.telefono is string &&
             data.usuarioId is string;
    }
    
    // Función helper para verificar datos válidos de cita
    function isValidCitaData() {
      let data = request.resource.data;
      return data.keys().hasAll(['servicioId', 'usuarioId', 'fechaReservada', 'estado']) &&
             ((data.keys().hasAll(['clienteId']) && data.clienteId is string) ||
              (data.keys().hasAll(['clienteAmbulatorio']) && data.clienteAmbulatorio.nombre is string)) &&
             data.estado in ['PENDIENTE', 'CONFIRMADA', 'COMPLETADA', 'CANCELADA'] &&
             data.fechaReservada is timestamp;
    }

    // Reglas para usuarios
    match /usuarios/{userId} {
      // Permitir lectura y escritura solo al propietario del documento
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Validar datos al crear/actualizar
      allow create: if isAuthenticated() && isOwner(userId) && isValidUserData();
      allow update: if isAuthenticated() && isOwner(userId) && isValidUserData();
    }
    
    // Reglas para servicios
    match /servicios/{servicioId} {
      // Permitir lectura a todos los usuarios autenticados (para ver catálogos)
      allow read: if isAuthenticated();
      
      // Permitir todas las operaciones al propietario del servicio
      allow read, write, create, update, delete: if isAuthenticated() && isOwner(resource.data.usuarioId);
      
      // Permitir creación si es el propietario y los datos son válidos
      allow create: if isAuthenticated() && isOwner(request.resource.data.usuarioId) && isValidServiceData();
      
      // Permitir actualización si es el propietario y los datos son válidos
      allow update: if isAuthenticated() && isOwner(resource.data.usuarioId) && isValidServiceData();
      
      // Permitir eliminación si es el propietario
      allow delete: if isAuthenticated() && isOwner(resource.data.usuarioId);
    }
    
    // Reglas para clientes
    match /clientes/{clienteId} {
      // Solo el propietario puede leer y escribir sus clientes
      allow read, write: if isAuthenticated() && isOwner(resource.data.usuarioId);
      
      // Permitir creación si es el propietario y los datos son válidos
      allow create: if isAuthenticated() && isOwner(request.resource.data.usuarioId) && isValidClientData();
      
      // Permitir actualización si es el propietario y los datos son válidos
      allow update: if isAuthenticated() && isOwner(resource.data.usuarioId) && isValidClientData();
      
      // Permitir eliminación si es el propietario
      allow delete: if isAuthenticated() && isOwner(resource.data.usuarioId);
    }
    
    // Reglas para citas
    match /citas/{citaId} {
      // El propietario puede leer y escribir sus citas
      allow read, write: if isAuthenticated() && isOwner(resource.data.usuarioId);
      
      // El cliente puede leer sus propias citas
      allow read: if isAuthenticated() && request.auth.uid == resource.data.clienteId;
      
      // Validar datos al crear/actualizar
      allow create: if isAuthenticated() && 
                       (isOwner(request.resource.data.usuarioId) || request.auth.uid == request.resource.data.clienteId) && 
                       isValidCitaData();
      allow update: if isAuthenticated() && isOwner(resource.data.usuarioId) && isValidCitaData();
    }

    // Reglas para tickets (soporte/servicios)
    match /tickets/{ticketId} {
      // Solo el propietario (usuarioId) puede leer y escribir sus tickets
      allow read, write: if isAuthenticated() && isOwner(resource.data.usuarioId);

      // Permitir lectura por parte del cliente asociado (si existe clienteId)
      allow read: if isAuthenticated() && request.auth.uid == resource.data.clienteId;

      // Validación básica al crear
      allow create: if isAuthenticated() && isOwner(request.resource.data.usuarioId) &&
                    request.resource.data.keys().hasAll(['descripcion', 'fechaIngreso', 'tipoUrgencia', 'usuarioId']) &&
                    request.resource.data.tipoUrgencia in ['ALTA', 'MEDIA', 'BAJA'];

      // Actualizaciones y borrado solo por propietario
      allow update, delete: if isAuthenticated() && isOwner(resource.data.usuarioId);
    }

    // Reglas para pagos
    match /pagos/{pagoId} {
      // Solo el propietario puede ver y gestionar sus pagos
      allow read, write: if isAuthenticated() && isOwner(resource.data.usuarioId);

      // Permitir creación si el payload contiene monto y usuarioId válidos
      allow create: if isAuthenticated() && isOwner(request.resource.data.usuarioId) &&
                    request.resource.data.keys().hasAll(['monto', 'usuarioId', 'fecha']) &&
                    request.resource.data.monto is number;

      // Actualización/ eliminación solo por propietario
      allow update, delete: if isAuthenticated() && isOwner(resource.data.usuarioId);
    }
    
    // Reglas para archivos de usuario (fotos de perfil, portadas, etc.)
    match /usuario-files/{userId}/{allPaths=**} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Reglas para archivos públicos (pueden ser leídos por cualquiera)
    match /public-files/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // Denegar todo lo demás
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
